// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Myd;

#nullable disable

namespace SCFFinalHomework.Migrations
{
    [DbContext(typeof(MyDB))]
    [Migration("20250430094144_FixGoodIdNullable")]
    partial class FixGoodIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GOOD.Good", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("img")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<bool>("solded")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("GoodUser", b =>
                {
                    b.Property<string>("StarredById")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("staredId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("StarredById", "staredId");

                    b.HasIndex("staredId");

                    b.ToTable("UserStarredGoods", (string)null);
                });

            modelBuilder.Entity("ORDER.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("buyerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("goodId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<string>("sellerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("buyerId");

                    b.HasIndex("goodId")
                        .IsUnique();

                    b.HasIndex("sellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("USER.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("call")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GOOD.Good", b =>
                {
                    b.HasOne("USER.User", "user")
                        .WithMany("goods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("GoodUser", b =>
                {
                    b.HasOne("USER.User", null)
                        .WithMany()
                        .HasForeignKey("StarredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOOD.Good", null)
                        .WithMany()
                        .HasForeignKey("staredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ORDER.Order", b =>
                {
                    b.HasOne("USER.User", "buyer")
                        .WithMany("buy_orders")
                        .HasForeignKey("buyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GOOD.Good", "good")
                        .WithOne("order")
                        .HasForeignKey("ORDER.Order", "goodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("USER.User", "seller")
                        .WithMany("sell_orders")
                        .HasForeignKey("sellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("buyer");

                    b.Navigation("good");

                    b.Navigation("seller");
                });

            modelBuilder.Entity("GOOD.Good", b =>
                {
                    b.Navigation("order")
                        .IsRequired();
                });

            modelBuilder.Entity("USER.User", b =>
                {
                    b.Navigation("buy_orders");

                    b.Navigation("goods");

                    b.Navigation("sell_orders");
                });
#pragma warning restore 612, 618
        }
    }
}
